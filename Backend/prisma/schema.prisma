generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  customer_id       Int         @id @default(autoincrement())
  name              String      @db.VarChar(45)
  last_name         String      @db.VarChar(45)
  customer_email    String?     @unique(map: "customer_email_UNIQUE") @db.VarChar(45)
  customer_phone    String?     @unique(map: "customer_phone_UNIQUE") @db.VarChar(10)
  address           String?     @db.VarChar(255)
  province          String?     @db.VarChar(100)
  district          String?     @db.VarChar(100)
  sub_district      String?     @db.VarChar(100)
  postal_code       String?     @db.VarChar(5)
  id_card_number    String?     @unique(map: "id_card_number_UNIQUE") @db.VarChar(13)
  username          String      @unique(map: "username_UNIQUE") @db.VarChar(30)
  password          String      @db.VarChar(255)
  customer_datetime DateTime    @default(now()) @db.DateTime(0)
  customer_update   DateTime    @default(now()) @updatedAt

  profile_image_url String?     @db.VarChar(255)
  profile_public_id String?     @db.VarChar(255)

  id_card_image_url String?     @db.VarChar(255)
  id_card_public_id String?     @db.VarChar(255)
  role              Role        @default(USER)
  birthday          DateTime?   @db.Date
  age               Int?
  cart              Cart[]
  favorites         Favorite[]
  orders            Orders[]
  proportion        Proportion?
  rentals           Rentals[]
  reviews           Review[]
}

model Proportion {
  proportion_id     Int      @id @default(autoincrement())
  chest             Decimal? @db.Decimal(5, 1)
  waist             Decimal? @db.Decimal(5, 1)
  hips              Decimal? @db.Decimal(5, 1)
  proportion_update DateTime @updatedAt
  customerId        Int      @unique
  customer          Customer @relation(fields: [customerId], references: [customer_id])
}

model Category {
  category_id       String    @id @db.VarChar(9)
  category_name     String    @db.VarChar(45)
  category_datetime DateTime  @default(now()) @db.DateTime(0)
  category_update   DateTime  @updatedAt
  products          Product[]
}

model Product {
  product_id     Int                 @id @default(autoincrement())
  ppId           Int?
  categoryId     String              @db.VarChar(9)
  product_name   String              @db.VarChar(100)
  shipping_info  String?             @db.VarChar(255)
  product_update DateTime            @updatedAt
  product_status Boolean             @default(true)
  story_name     String?             @db.VarChar(100)
  CartItem       CartItem[]
  favorites      Favorite[]
  OrderItem      OrderItem[]
  category       Category            @relation(fields: [categoryId], references: [category_id])
  size           Proportion_product? @relation(fields: [ppId], references: [proportion_product_id])
  images         ProductImage[]
  prices         ProductPrice[]
  rentals        Rentals[]
  reviews        Review[]

  @@index([categoryId], map: "category_id_idx")
  @@index([ppId], map: "fk_product_pp_idx")
}

model ProductImage {
  image_id      Int     @id @default(autoincrement())
  image_url     String  @db.VarChar(255)
  cloudinary_id String  @db.VarChar(255)
  productId     Int
  product       Product @relation(fields: [productId], references: [product_id])

  @@index([productId], map: "ProductImage_productId_fkey")
}

model Proportion_product {
  proportion_product_id Int       @id @default(autoincrement())
  chest                 Decimal?  @db.Decimal(5, 1)
  waist                 Decimal?  @db.Decimal(5, 1)
  hips                  Decimal?  @db.Decimal(5, 1)
  products              Product[]
}

model ProductPrice {
  productPrice_id Int                 @id @default(autoincrement())
  productId       Int
  type            ProductPrice_status
  price_pri       Decimal             @db.Decimal(10, 2)
  price_test      Decimal             @db.Decimal(10, 2)
  days_test       Int?
  days_pri        Int?
  createdAt       DateTime            @default(now())
  Deposit         Decimal?            @db.Decimal(10, 2)
  CartItem        CartItem[]
  OrderItem       OrderItem[]
  product         Product             @relation(fields: [productId], references: [product_id])

  @@index([productId], map: "fk_Product_ProductPrice_idx")
}

model Cart {
  cart_id    Int        @id @default(autoincrement())
  customerId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  customer   Customer   @relation(fields: [customerId], references: [customer_id])
  items      CartItem[]

  @@index([customerId], map: "fk_cart_customer_idx")
}

model CartItem {
  cartItem_id    Int           @id @default(autoincrement())
  cartId         Int
  productId      Int
  productPriceId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  endDate        DateTime?     @db.DateTime(0)
  mode           String?       @db.VarChar(10)
  startDate      DateTime?     @db.DateTime(0)
  cart           Cart          @relation(fields: [cartId], references: [cart_id])
  product        Product       @relation(fields: [productId], references: [product_id])
  price          ProductPrice? @relation(fields: [productPriceId], references: [productPrice_id])

  @@index([cartId], map: "fk_cartItem_cart_idx")
  @@index([productId], map: "fk_cartItem_product_idx")
  @@index([productPriceId], map: "fk_cartItem_price_idx")
}

model Orders {
  order_id       Int         @id @default(autoincrement())
  customerId     Int
  order_code     String?     @unique @db.VarChar(20)
  total_price    Decimal     @db.Decimal(10, 2)
  deposit_amount Decimal?    @db.Decimal(10, 2)
  created_at     DateTime    @default(now())
  OrderItem      OrderItem[]
  customer       Customer    @relation(fields: [customerId], references: [customer_id])
  Rentals        Rentals[]
  ReturnBox      ReturnBox[]
  shippings      Shipping[]

  @@index([customerId], map: "fk_order_customer_idx")
}

model OrderItem {
  orderItem_id    Int               @id @default(autoincrement())
  orderId         Int
  productId       Int
  productPriceId  Int
  order           Orders            @relation(fields: [orderId], references: [order_id])
  product         Product           @relation(fields: [productId], references: [product_id])
  price           ProductPrice      @relation(fields: [productPriceId], references: [productPrice_id])
  ShippingBoxItem ShippingBoxItem[]

  @@index([orderId], map: "fk_orderItem_order_idx")
  @@index([productId], map: "fk_orderItem_product_idx")
  @@index([productPriceId], map: "fk_orderItem_price_idx")
}

model Favorite {
  favorite_id Int      @id @default(autoincrement())
  customerId  Int
  productId   Int
  created_at  DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [customer_id])
  product     Product  @relation(fields: [productId], references: [product_id])

  @@unique([customerId, productId])
  @@index([productId], map: "Favorite_productId_fkey")
}

model PaymentSlip {
  slip_id       Int      @id @default(autoincrement())
  rentalId      Int
  image_url     String   @db.VarChar(255)
  cloudinary_id String   @db.VarChar(255)
  uploaded_at   DateTime @default(now())
  rental        Rentals  @relation(fields: [rentalId], references: [rental_id], onDelete: Cascade)

  @@index([rentalId], map: "PaymentSlip_rentalId_fkey")
}

model Shipping {
  shipping_id     Int                       @id @default(autoincrement())
  orderId         Int
  shipping_date   DateTime?                 @db.DateTime(0)
  shipping_status Shipping_shipping_status?
  shipping_name   String?                   @db.VarChar(45)
  image_slip      String?                   @db.VarChar(255)
  shipping_update DateTime                  @updatedAt
  order           Orders                    @relation(fields: [orderId], references: [order_id])
  boxes           ShippingBox[]
  ShippingHistory ShippingHistory[]

  @@index([orderId], map: "fk_shipping_order_idx")
}

model ShippingBox {
  box_id        Int               @id @default(autoincrement())
  shippingId    Int
  tracking_code String            @db.VarChar(20)
  note          String?           @db.VarChar(255)
  shipping      Shipping          @relation(fields: [shippingId], references: [shipping_id])
  items         ShippingBoxItem[]

  @@index([shippingId], map: "fk_box_shipping_idx")
}

model ShippingBoxItem {
  shippingBoxItem_id Int          @id @default(autoincrement())
  boxId              Int?
  orderItemId        Int
  quantity           Int          @default(1)
  box                ShippingBox? @relation(fields: [boxId], references: [box_id], onDelete: Cascade, map: "fk_shippingboxitem_box")
  orderItem          OrderItem    @relation(fields: [orderItemId], references: [orderItem_id], onDelete: Cascade, map: "fk_shippingboxitem_orderitem")

  @@index([boxId], map: "fk_shippingboxitem_box_idx")
  @@index([orderItemId], map: "fk_shippingboxitem_orderitem_idx")
}

model ShippingHistory {
  history_id Int                      @id @default(autoincrement())
  shippingId Int
  status     Shipping_shipping_status
  changed_at DateTime                 @default(now())
  note       String?                  @db.VarChar(255)
  shipping   Shipping                 @relation(fields: [shippingId], references: [shipping_id])

  @@index([shippingId], map: "ShippingHistory_shippingId_fkey")
}

model ReturnBox {
  box_id        Int             @id @default(autoincrement())
  orderId       Int
  tracking_code String          @db.VarChar(20)
  note          String?         @db.VarChar(255)
  created_at    DateTime        @default(now())
  order         Orders          @relation(fields: [orderId], references: [order_id])
  items         ReturnBoxItem[]

  @@index([orderId], map: "ReturnBox_orderId_fkey")
}

model ReturnBoxItem {
  id       Int       @id @default(autoincrement())
  boxId    Int
  rentalId Int
  quantity Int       @default(1)
  box      ReturnBox @relation(fields: [boxId], references: [box_id], onDelete: Cascade)
  rental   Rentals   @relation(fields: [rentalId], references: [rental_id], onDelete: Cascade)

  @@index([boxId], map: "ReturnBoxItem_boxId_fkey")
  @@index([rentalId], map: "ReturnBoxItem_rentalId_fkey")
}

model Rentals {
  rental_id            Int                     @id @default(autoincrement())
  customerId           Int
  productId            Int
  rental_date          DateTime?               @default(now()) @db.DateTime(0)
  rental_end_date      DateTime?               @default(now()) @db.DateTime(0)
  rental_status        Calender_rental_status?
  rental_datetime      DateTime?               @default(now()) @db.DateTime(0)
  rental_update        DateTime?               @updatedAt
  mode                 RentalMode?             @default(TEST)
  orderId              Int?
  total_price          Decimal?                @db.Decimal(10, 2)
  return_tracking_code String?
  shipping_box_id      Int?
  received_at          DateTime?
  PaymentSlip          PaymentSlip[]
  ReceiveImages        RentalReceiveImage[]
  customer             Customer                @relation(fields: [customerId], references: [customer_id])
  order                Orders?                 @relation(fields: [orderId], references: [order_id], onDelete: Cascade)
  product              Product                 @relation(fields: [productId], references: [product_id])
  ReturnBoxItem        ReturnBoxItem[]
  Review               Review[]

  @@index([customerId], map: "FK_customer_id_idx")
  @@index([productId], map: "FK_product_id")
  @@index([orderId], map: "fk_rentals_orders")
}

model DelaySetting {
  delaySetting_id      Int      @id @default(autoincrement())
  delay_ship_days      Int      @default(3)
  delay_return_days    Int      @default(3)
  delay_clean_days     Int      @default(5)
  updated_at           DateTime @default(now()) @updatedAt
  delay_admin_days     Int      @default(2)
  delay_next_ship_days Int      @default(3)
  plus_delay_days      Int?
}

model Review {
  review_id  Int           @id @default(autoincrement())
  customerId Int
  productId  Int
  created_at DateTime      @default(now())
  rentalId   Int
  reviewText String
  customer   Customer      @relation(fields: [customerId], references: [customer_id])
  product    Product       @relation(fields: [productId], references: [product_id])
  rental     Rentals       @relation(fields: [rentalId], references: [rental_id])
  images     ReviewImage[]

  @@index([rentalId], map: "Review_rentalId_fkey")
  @@index([customerId], map: "fk_review_customer_idx")
  @@index([productId], map: "fk_review_product_idx")
}

model ReviewImage {
  image_url String @db.VarChar(255)
  reviewId  Int
  id        Int    @id @default(autoincrement())
  review    Review @relation(fields: [reviewId], references: [review_id])

  @@index([reviewId], map: "fk_reviewimage_review_idx")
}

model RentalReceiveImage {
  id         Int      @id @default(autoincrement())
  rentalId   Int
  image_url  String
  uploadedAt DateTime @default(now())
  rental     Rentals  @relation(fields: [rentalId], references: [rental_id], onDelete: Cascade)

  @@index([rentalId], map: "RentalReceiveImage_rentalId_fkey")
}

model districts {
  id          Int       @id
  name_th     String    @db.VarChar(150)
  name_en     String    @db.VarChar(150)
  province_id Int
  created_at  DateTime? @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)
  deleted_at  DateTime? @db.DateTime(0)
}

model geographies {
  id   Int    @id
  name String @db.VarChar(255)
}

model provinces {
  id           Int       @id
  name_th      String    @db.VarChar(150)
  name_en      String    @db.VarChar(150)
  geography_id Int
  created_at   DateTime? @db.DateTime(0)
  updated_at   DateTime? @db.DateTime(0)
  deleted_at   DateTime? @db.DateTime(0)
}

model sub_districts {
  id          Int       @id
  zip_code    Int
  name_th     String    @db.VarChar(150)
  name_en     String    @db.VarChar(150)
  district_id Int
  lat         Float?
  long        Float?
  created_at  DateTime? @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)
  deleted_at  DateTime? @db.DateTime(0)
}

enum Role {
  ADMIN
  USER
}

enum Shipping_shipping_status {
  IN_PROGRESS @map("กำลังจัดส่ง")
  RETURNING   @map("กำลังจัดส่งคืน")
  DELIVERED   @map("จัดส่งสำเร็จ")
}

enum Calender_rental_status {
  Ready_Rental     @map("พร้อมเช่า")
  WAITING_PAYMENT  @map("รอชำระเงิน")
  WAITING_CONFIRM  @map("รอยืนยันจากร้าน")
  WAITING_DELIVER  @map("รอส่ง")
  WAITING_RECEIVE  @map("กำลังจัดส่ง")
  RENTED           @map("กำลังเช่า")
  RETURNING        @map("กำลังคืนสินค้า")
  RETURNED         @map("คืนแล้ว")
  CLEANING         @map("กำลังทำความสะอาด")
  Not_Ready_Rental @map("ไม่พร้อมเช่า")
  CANCELLED        @map("ยกเลิกเช่า")
}

enum RentalMode {
  TEST
  PRI
}

enum ProductPrice_status {
  suit               @map("ชุด")
  wig                @map("วิก")
  suit_wig           @map("ชุด+วิก")
  suit_wig_prop      @map("ชุด+วิก+พร็อพ")
  suit_wig_shoe      @map("ชุด+วิก+รองเท้า")
  suit_wig_prop_shoe @map("ชุด+วิก+พร็อพ+รองเท้า")
  addon_prop         @map("พร็อพเสริม")
  addon_shoe         @map("รองเท้า")
  solo_prop          @map("พร็อพเดี่ยว")
  solo_shoe          @map("รองเท้าเดี่ยว")
}
