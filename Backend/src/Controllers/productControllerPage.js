const prisma = require('../../prisma/prisma');

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.getProducts = async (req, res) => {
    try {
        const products = await prisma.Product.findMany({
            include: {
                images: true,
                prices: true
            },
            orderBy: { product_id: "desc" }
        });

        res.render("home", { products });
    } catch (err) {
        console.error("Error getProducts:", err);
        res.status(500).send("‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    }
};

// GET /products/:id/edit ‚Üí render ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.renderEditProduct = async (req, res) => {
    try {
        const { id } = req.params;

        const product = await prisma.Product.findUnique({
            where: { product_id: parseInt(id, 10) },
            include: {
                prices: true,
                size: true,
                category: true,
                images: true
            }
        });

        if (!product) return res.status(404).send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");

        const categories = await prisma.Category.findMany();

        res.render("edit_pro", { product, categories });
    } catch (err) {
        console.error("Error renderEditProduct:", err);
        res.status(500).send("‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
};


// ‚úÖ ‡πÇ‡∏ä‡∏ß‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ category ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô, ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.renderProductsPage = async (req, res) => {
    try {
      const { categoryId, sizeId, search } = req.query;
      const user = req.user; // ‡∏à‡∏≤‡∏Å middleware auth ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  
      // üìÇ ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const categories = await prisma.category.findMany({
        orderBy: { category_name: "asc" },
      });
  
      // üìè ‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const proportions = await prisma.proportion_product.findMany({
        orderBy: { proportion_product_id: "asc" },
      });
  
      // üßç ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      let defaultSize = "";
      if (user) {
        const customer = await prisma.customer.findUnique({
          where: { customer_id: user.customer_id },
          include: { proportion: true },
        });
        defaultSize = customer?.proportion?.proportion_product_id || "";
      }
  
      // üîç ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      const whereClause = {
        ...(categoryId ? { categoryId } : {}),
        ...(sizeId
          ? { ppId: parseInt(sizeId) }
          : defaultSize
          ? { ppId: parseInt(defaultSize) }
          : {}),
        ...(search ? { product_name: { contains: search } } : {}), // ‚úÖ ‡∏•‡∏ö mode ‡∏≠‡∏≠‡∏Å
      };
  
      // üì¶ ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      const products = await prisma.product.findMany({
        where: whereClause,
        include: {
          images: true,
          prices: true,
          category: true,
          size: true,
        },
        orderBy: { product_id: "desc" },
      });
  
      // üñºÔ∏è ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ category
      res.render("category", {
        categories,
        proportions,
        products,
        selectedCategory: categoryId || "",
        selectedSize: sizeId || defaultSize || "",
        searchTerm: search || "",
      });
    } catch (err) {
      console.error("‚ùå Error renderProductsPage:", err);
      res.status(500).send("‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    }
  };
  


