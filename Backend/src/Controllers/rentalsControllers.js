const prisma = require("../../prisma/prisma");

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin / ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤)
exports.getRentals = async (req, res) => {
  try {
    const rentals = await prisma.Rentals.findMany({
      include: {
        customer: true,
        product: true,
      },
      orderBy: { rental_id: "desc" },
    });
    res.status(200).json(rentals);
  } catch (err) {
    console.error("‚ùå getRentals error:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (Customer)
exports.getMyRentals = async (req, res) => {
  try {
    const rentals = await prisma.Rentals.findMany({
      where: { customerId: req.user.id },
      include: { product: true },
      orderBy: { rental_id: "desc" },
    });
    res.status(200).json(rentals);
  } catch (err) {
    console.error("‚ùå getMyRentals error:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏à‡∏≠‡∏á)
exports.createRental = async (req, res) => {
  try {
    const { productId, rental_date, rental_end_date, total_price, mode } = req.body;
    const customerId = req.user?.id;

    if (!customerId || !productId || !rental_date || !rental_end_date) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á" });
    }

    const startDate = new Date(rental_date);
    const endDate = new Date(rental_end_date);

    if (endDate < startDate) {
      return res.status(400).json({ error: "‡∏ß‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ä‡πà‡∏≤" });
    }

    // üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏≠‡∏á‡πÑ‡∏´‡∏°
    const overlap = await prisma.Rentals.findFirst({
      where: {
        productId: Number(productId),
        rental_status: { notIn: ["CANCELLED", "RETURNED"] },
        rental_end_date: { gte: startDate },
        rental_date: { lte: endDate },
      },
    });

    if (overlap) {
      return res.status(400).json({
        error: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${overlap.rental_date.toISOString().split("T")[0]} ‡∏ñ‡∏∂‡∏á ${overlap.rental_end_date.toISOString().split("T")[0]}`
      });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô)
    const rental = await prisma.Rentals.create({
      data: {
        customerId,
        productId: Number(productId),
        rental_date: startDate,
        rental_end_date: endDate,
        mode: mode || "TEST",
        total_price: Number(total_price) || 0,
        rental_status: "WAITING_CONFIRM",
      },
    });

    res.status(201).json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô)", rental });
  } catch (err) {
    console.error("‚ùå createRental error:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// ‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤/‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
exports.confirmRental = async (req, res) => {
  try {
    const { id } = req.params;
    const rental = await prisma.Rentals.update({
      where: { rental_id: Number(id) },
      data: { rental_status: "RENTED" },
    });
    res.status(200).json({ message: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", rental });
  } catch (err) {
    console.error("‚ùå confirmRental error:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// ‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.returnRental = async (req, res) => {
  try {
    const { id } = req.params;
    const rental = await prisma.Rentals.update({
      where: { rental_id: Number(id) },
      data: { rental_status: "RETURNED" },
    });
    res.status(200).json({ message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", rental });
  } catch (err) {
    console.error("‚ùå returnRental error:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// ‚úÖ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
exports.cancelRental = async (req, res) => {
  try {
    const { id } = req.params;
    const rental = await prisma.Rentals.update({
      where: { rental_id: Number(id) },
      data: { rental_status: "CANCELLED" },
    });
    res.status(200).json({ message: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", rental });
  } catch (err) {
    console.error("‚ùå cancelRental error:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// ‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô / ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô)
exports.updateRental = async (req, res) => {
  try {
    const { id } = req.params;
    const { rental_end_date, rental_status } = req.body;

    if (!rental_end_date && !rental_status) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" });
    }

    const updateData = {};
    if (rental_end_date) updateData.rental_end_date = new Date(rental_end_date);
    if (rental_status) updateData.rental_status = rental_status;

    const rental = await prisma.Rentals.update({
      where: { rental_id: Number(id) },
      data: updateData,
    });

    res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", rental });
  } catch (err) {
    console.error("‚ùå updateRental error:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// ‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (soft delete ‡∏à‡∏∞‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô)
exports.deleteRental = async (req, res) => {
  try {
    const { id } = req.params;
    await prisma.Rentals.delete({ where: { rental_id: Number(id) } });
    res.status(200).json({ message: "‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå deleteRental error:", err);
    res.status(500).json({ error: "Server error" });
  }
};

exports.createFromOrder = async (order) => {
  try {
    console.log("üßæ createFromOrder triggered for order:", order.order_id);

    for (const item of order.OrderItem) {
      console.log("üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", item.productId);

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CartItem ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ productId + customerId)
      const cartItem = await prisma.CartItem.findFirst({
        where: {
          productId: item.productId,
          cart: { customerId: order.customerId },
        },
      });

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
      if (!cartItem) {
        console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö cartItem ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", item.productId);
        continue;
      }

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å productPrice ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏ß‡πâ
      const priceRecord = await prisma.ProductPrice.findUnique({
        where: { productPrice_id: item.price.productPrice_id },
      });

      await prisma.Rentals.create({
        data: {
          customerId: order.customerId,
          productId: item.productId,
          rental_date: cartItem.startDate,
          rental_end_date: cartItem.endDate,
          mode: cartItem.mode === "pri" ? "PRI" : "TEST",
          rental_status: "WAITING_CONFIRM",
          total_price: Number(priceRecord?.price_pri || priceRecord?.price_test || 0),
        },
      });

      console.log(`‚úÖ Rental created for product ${item.productId}`);
    }
  } catch (err) {
    console.error("‚ùå createFromOrder error:", err);
  }
};

exports.confirmBatch = async (req, res) => {
  try {
    const { rentalIds } = req.body;
    if (!rentalIds?.length)
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" });

    await prisma.Rentals.updateMany({
      where: { rental_id: { in: rentalIds.map(Number) } },
      data: { rental_status: "RENTED" },
    });

    res.json({ message: `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${rentalIds.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
  } catch (err) {
    console.error("‚ùå confirmBatch error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ disable ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô)
exports.getBookingsByProduct = async (req, res) => {
  try {
    const productId = Number(req.params.productId);

    const rentals = await prisma.Rentals.findMany({
      where: {
        productId,
        rental_status: { notIn: ["CANCELLED", "RETURNED"] },
      },
      select: {
        rental_date: true,
        rental_end_date: true,
        mode: true, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug ‡πÑ‡∏î‡πâ
      },
    });

    // ‚úÖ ‡∏£‡∏ß‡∏° buffer 3 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô / 9 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á ‚Äî ‡∏Å‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏´‡∏°‡∏î‡∏ó‡∏∏‡∏Å mode
    const withBuffer = rentals.map((r) => {
      const start = new Date(r.rental_date);
      const end = new Date(r.rental_end_date);

      const startMinus3 = new Date(start);
      startMinus3.setDate(start.getDate() - 3);

      const endPlus9 = new Date(end);
      endPlus9.setDate(end.getDate() + 9);

      return {
        start: startMinus3.toISOString().split("T")[0],
        end: endPlus9.toISOString().split("T")[0],
      };
    });

    res.json(withBuffer);
  } catch (err) {
    console.error("‚ùå getBookingsByProduct error:", err);
    res.status(500).json({ message: "Server error" });
  }
};
