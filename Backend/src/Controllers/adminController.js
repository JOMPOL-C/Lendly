const prisma = require('../../prisma/prisma');
const { notifyUserEmail, notifyAdminEmail } = require("../utils/emailNotify");

// ‚úÖ ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏™‡πà‡∏á)
exports.confirmRental = async (req, res) => {
    try {
        const { rentalId } = req.params;

        const updated = await prisma.rentals.update({
            where: { rental_id: parseInt(rentalId) },
            data: { rental_status: "WAITING_DELIVER" },
            include: { customer: true, product: true },
        });

        console.log(`‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à rental_id: ${rentalId}`);

        // ‚úâÔ∏è ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        if (updated.customer?.customer_email) {
            await notifyUserEmail(
                updated.customer.customer_email,
                `
          ‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!  
          ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${updated.product.product_name}  
          ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì üíú
          `,
                "üì¶ Lendly | ‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß"
            );
        }

        // ‚úâÔ∏è ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (optional)
        await notifyAdminEmail(`
        üì¶ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤  
        ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${updated.product.product_name}  
        ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${updated.customer.name} ${updated.customer.last_name}
      `);

        res.status(200).json({
            message: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏™‡πà‡∏á)",
            updated,
        });
    } catch (err) {
        console.error("‚ùå confirmRental error:", err);
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏î‡πâ" });
    }
};

exports.renderAdminDashboard = async (req, res) => {
    try {
        const rentals = await prisma.rentals.findMany({
            include: {
                PaymentSlip: true, // ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏Å‡∏±‡∏ö rental ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                order: true,
            },
        });

        const totalRentals = rentals.length;
        const waitingRentals = rentals.filter(r => r.rental_status === 'WAITING_CONFIRM').length;
        const activeRentals = rentals.filter(r => r.rental_status === 'RENTED').length;
        const cancelledRentals = rentals.filter(r => r.rental_status === 'CANCELLED').length;

        // ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å total_price ‡πÉ‡∏ô Rentals (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡∏à‡∏≤‡∏Å order.total_price ‡∏Å‡πá‡πÑ‡∏î‡πâ)
        const totalRevenue = rentals.reduce((sum, r) => {
            const amount = r.total_price ? Number(r.total_price) : 0;
            return sum + amount;
        }, 0);

        const monthlyRevenue = Array(12).fill(0);
        const monthLabels = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'];

        rentals.forEach(r => {
            const m = new Date(r.rental_date || new Date()).getMonth();
            const amount = r.total_price ? Number(r.total_price) : 0;
            monthlyRevenue[m] += amount;
        });

        const statusCounts = [
            waitingRentals,
            activeRentals,
            rentals.filter(r => r.rental_status === 'RETURNED').length,
            cancelledRentals,
        ];

        res.render('adminDashboard', {
            totalRentals,
            waitingRentals,
            activeRentals,
            cancelledRentals,
            totalRevenue,
            monthLabels,
            monthlyRevenue,
            statusCounts,
        });
    } catch (err) {
        console.error("‚ùå renderAdminDashboard error:", err);
        res.status(500).send("Server Error");
    }
};

// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
exports.getAllCustomers = async (req, res) => {
    try {
        const customers = await prisma.Customer.findMany({
            include: {
                proportion: true,
                rentals: {
                    include: {
                        product: { select: { product_name: true } },
                    },
                    orderBy: { rental_id: 'desc' },
                },
                orders: {
                    include: {
                        Rentals: {
                            include: {
                                product: { select: { product_name: true } },
                            },
                        },
                    },
                    orderBy: { order_id: 'desc' },
                },
            },
            orderBy: { customer_id: 'asc' },
        });

        res.render("admin_customers", { customers });
    } catch (err) {
        console.error("‚ùå getAllCustomers error:", err);
        res.status(500).send("Server Error");
    }
};

exports.getTopStats = async (req, res) => {
    try {
        // ‚úÖ Top 5 ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        const topProducts = await prisma.$queryRaw`
        SELECT p.product_name, COUNT(r.rental_id) AS count
        FROM Rentals r
        JOIN Product p ON r.product_id = p.product_id
        GROUP BY p.product_name
        ORDER BY count DESC
        LIMIT 5;
      `;

        // ‚úÖ Top 5 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        const topCategories = await prisma.$queryRaw`
        SELECT c.category_name, COUNT(r.rental_id) AS count
        FROM Rentals r
        JOIN Product p ON r.product_id = p.product_id
        JOIN Category c ON p.categoryId = c.category_id
        GROUP BY c.category_name
        ORDER BY count DESC
        LIMIT 5;
      `;

        res.json({ topProducts, topCategories });
    } catch (err) {
        console.error("‚ùå getTopStats error:", err);
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÑ‡∏î‡πâ" });
    }
};

exports.renderDepositRefundPage = async (req, res) => {
    try {
        const rentals = await prisma.rentals.findMany({
            where: { rental_status: "RETURNED" },
            include: {
                product: { include: { images: true } },
                customer: true,
            },
            orderBy: { rental_id: 'desc' },
        });

        res.render("Deposit_refund", { rentals });
    } catch (err) {
        console.error("‚ùå renderDepositRefundPage error:", err);
        res.status(500).send("Server Error");
    }
};

exports.refundDeposit = async (req, res) => {
    try {
        const { rental_id } = req.params;
        const { refund_amount, refund_note } = req.body;
        const file = req.file;

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥
        const updated = await prisma.rentals.update({
            where: { rental_id: parseInt(rental_id) },
            data: {
                refund_amount: refund_amount ? parseFloat(refund_amount) : null,
                refund_note: refund_note || null,
                refund_slip: file?.path || null,
                refund_date: new Date(),
                rental_status: "Deposit_Refunded",
            },
            include: {
                customer: true,
                product: true,
            },
        });

        console.log(`üí∏ ‡∏Ñ‡∏∑‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ rental_id: ${rental_id}`);

        // ‚úâÔ∏è ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        if (updated.customer?.customer_email) {
            const noteText = updated.refund_note
                ? `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô: ${updated.refund_note}`
                : "";

            await notifyUserEmail(
                updated.customer.customer_email,
                `
          üíú ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
          ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${updated.product?.product_name || "-"}
          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${updated.refund_amount ?? 0} ‡∏ö‡∏≤‡∏ó
          ${noteText}
          `,
                "üí∏ Lendly | ‡∏Ñ‡∏∑‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
            );
        }

        // ‚úâÔ∏è ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (optional)
        await notifyAdminEmail(`
        üí∏ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡πÅ‡∏•‡πâ‡∏ß  
        ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${updated.product?.product_name || "-"}  
        ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${updated.customer?.name || ""} ${updated.customer?.last_name || ""}  
        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${updated.refund_amount ?? 0} ‡∏ö‡∏≤‡∏ó
      `);

        res.json({
            message: "‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            updated,
        });
    } catch (err) {
        console.error("‚ùå refundDeposit error:", err);
        res.status(500).json({ error: "Server error" });
    }
};


module.exports = exports;