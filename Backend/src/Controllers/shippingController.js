const axios = require('axios');
const prisma = require('../../prisma/prisma');
const cloudinary = require('cloudinary').v2;
const multer = require('multer');
const { CloudinaryStorage } = require('multer-storage-cloudinary');

// üì¶ Config multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ö‡∏¥‡∏•
const storage = new CloudinaryStorage({
    cloudinary,
    params: {
        folder: 'shipping_slips',
        allowed_formats: ['jpg', 'png', 'jpeg'],
    },
});
exports.upload = multer({ storage });

const storageReturn = new CloudinaryStorage({
    cloudinary,
    params: {
        folder: 'return_receipts',  // ‚úÖ ‡πÅ‡∏¢‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        allowed_formats: ['jpg', 'png', 'jpeg'],
    },
});
const uploadReturn = multer({ storage: storageReturn });

// ‡πÅ‡∏•‡πâ‡∏ß export ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ route ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.uploadReturn = uploadReturn;

// üß© ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠ Token ‡∏à‡∏≤‡∏Å‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÑ‡∏ó‡∏¢
let thaiPostToken = null;
let thaiPostExpire = 0;

async function getThaiPostToken() {
    const now = Date.now();

    if (thaiPostToken && now < thaiPostExpire) return thaiPostToken;

    console.log("üîë ‡∏Ç‡∏≠ token ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ó‡∏¢‡πÇ‡∏û‡∏™‡∏ï‡πå...");
    console.log("üì° ‡πÉ‡∏ä‡πâ Header:", { Authorization: `Token ${process.env.TH_POST_API_KEY?.slice(0, 25)}...` });

    // ‚úÖ ‡∏¢‡∏¥‡∏á‡∏Ç‡∏≠ token ‡∏à‡∏≤‡∏Å‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÑ‡∏ó‡∏¢
    const res = await axios.post(
        'https://trackapi.thailandpost.co.th/post/api/v1/authenticate/token',
        {},
        { headers: { Authorization: `Token ${process.env.TH_POST_API_KEY}` } }
    );

    console.log("‚úÖ ‡πÑ‡∏î‡πâ token:", res.data.token?.slice(0, 30) + "...");

    thaiPostToken = res.data.token;
    thaiPostExpire = now + 55 * 60 * 1000; // ‡∏≠‡∏≤‡∏¢‡∏∏ 55 ‡∏ô‡∏≤‡∏ó‡∏µ
    return thaiPostToken;
}

// ===================================================
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
// ===================================================

exports.addBox = async (req, res) => {
    try {
        const { tracking_code, note, shippingId } = req.body;
        let { orderItemIds } = req.body;

        if (!shippingId)
            return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ shippingId" });
        if (!tracking_code)
            return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏±‡∏™‡∏î‡∏∏" });

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á orderItemIds ‡∏à‡∏≤‡∏Å JSON string ‚Üí array
        if (typeof orderItemIds === "string") {
            orderItemIds = JSON.parse(orderItemIds);
        }

        if (!Array.isArray(orderItemIds) || orderItemIds.length === 0) {
            return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ú‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ö‡∏¥‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        let imageUrl = null;
        if (req.file) imageUrl = req.file.path;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ orderItemIds ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏´‡∏°
        const validOrderItems = await prisma.orderItem.findMany({
            where: { orderItem_id: { in: orderItemIds.map(Number) } },
            select: { orderItem_id: true, productId: true, orderId: true },
        });

        if (validOrderItems.length !== orderItemIds.length) {
            return res.status(400).json({
                message:
                    "‡∏û‡∏ö orderItemId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            });
        }

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        const newBox = await prisma.shippingBox.create({
            data: {
                shippingId: Number(shippingId),
                tracking_code: tracking_code.toUpperCase(),
                note: note || "‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏´‡∏°‡πà",
            },
        });

        console.log("üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà:", newBox.box_id);
        console.log("üß© ‡∏ú‡∏π‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", orderItemIds.join(", "));

        // ‚úÖ ‡∏ú‡∏π‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
        await prisma.shippingBoxItem.createMany({
            data: validOrderItems.map((item) => ({
                boxId: newBox.box_id,
                orderItemId: item.orderItem_id,
                quantity: 1,
            })),
        });

        // ‚úÖ ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏ö‡∏¥‡∏•‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà shipping (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (imageUrl) {
            await prisma.shipping.update({
                where: { shipping_id: Number(shippingId) },
                data: { image_slip: imageUrl },
            });
            console.log("üßæ ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏ö‡∏¥‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        }

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        const productIds = validOrderItems.map((i) => i.productId);
        const orderId = validOrderItems[0].orderId;

        console.log("üì¶ ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rentals ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", productIds);
        console.log("üì¶ ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:", orderId);

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (WAITING_DELIVER)
        const updated = await prisma.rentals.updateMany({
            where: {
                orderId: orderId,
                productId: { in: productIds },
                rental_status: "WAITING_DELIVER",
            },
            data: { rental_status: "WAITING_RECEIVE" },
        });

        console.log(
            `üöö ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ rental ‡πÄ‡∏õ‡πá‡∏ô WAITING_RECEIVE ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${updated.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
        );

        // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        res.json({
            message: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ ${tracking_code.toUpperCase()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ú‡∏π‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${productIds.length} ‡∏ä‡∏¥‡πâ‡∏ô)`,
            box_id: newBox.box_id,
        });
    } catch (err) {
        console.error("‚ùå addBox error:", err);
        res
            .status(500)
            .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error: err.message });
    }
};



// ===================================================
// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏±‡∏™‡∏î‡∏∏ (Thai Post API)
// ===================================================
exports.getTrackingStatus = async (req, res) => {
    try {
        const { rental_id } = req.query;
        const rental = await prisma.rentals.findUnique({
            where: { rental_id: parseInt(rental_id) },
            include: {
                order: { include: { shippings: { include: { boxes: true } } } },
            },
        });

        if (!rental) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤' });

        const trackingCodes = rental.order.shippings.flatMap((s) =>
            s.boxes.map((b) => b.tracking_code)
        );
        if (trackingCodes.length === 0)
            return res.json({ message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏' });

        // ‚úÖ ‡∏Ç‡∏≠ token ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á API
        const token = await getThaiPostToken();

        const resPost = await axios.post(
            'https://trackapi.thailandpost.co.th/post/api/v1/track',
            { status: 'all', language: 'TH', barcode: trackingCodes },
            { headers: { Authorization: `Token ${token}` } }
        );

        res.json(resPost.data.response.items);
    } catch (err) {
        console.error('‚ùå getTrackingStatus error:', err);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
};

// ===================================================
// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏ö‡∏ö timeline
// ===================================================
exports.getTimelineStatus = async (req, res) => {
    try {
        const { rental_id } = req.query;
        if (!rental_id)
            return res.status(400).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ rental_id" });

        const rental = await prisma.rentals.findUnique({
            where: { rental_id: parseInt(rental_id) },
            include: {
                order: { include: { shippings: { include: { boxes: true } } } },
            },
        });

        if (!rental)
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤" });

        let step = 1;
        let label = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠";

        // ‚úÖ STEP BY STATUS ‚Äì ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
        switch (rental.rental_status) {
            case "WAITING_CONFIRM":
                step = 1;
                label = "‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô";
                break;
            case "WAITING_DELIVER":
                step = 2;
                label = "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
                break;
            case "WAITING_RECEIVE":
                step = 3;
                label = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
                break;
            case "RENTED":
                step = 4;
                label = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß";
                break;
            case "RETURNING":
                step = 5;
                label = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
                break;
            case "RETURNED":
                step = 6;
                label = "‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß";
                break;
            default:
                step = 1;
                label = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠";
        }

        console.log("üß© RENTAL STATUS DEBUG", rental.rental_status);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tracking ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å ThaiPost (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
        const trackingCodes = rental.order?.shippings?.flatMap((s) =>
            s.boxes.map((b) => b.tracking_code)
        ) || [];

        if (trackingCodes.length > 0) {
            try {
                const token = await getThaiPostToken();
                const resPost = await axios.post(
                    "https://trackapi.thailandpost.co.th/post/api/v1/track",
                    { status: "all", language: "TH", barcode: trackingCodes },
                    { headers: { Authorization: `Token ${token}` } }
                );

                const data = resPost.data.response.items;
                const allEvents = Object.values(data).flat();
                const latest = allEvents.sort(
                    (a, b) => new Date(b.status_date) - new Date(a.status_date)
                )[0];

                const code = Number(latest?.status_code);

                if (code >= 201 && code < 300) {
                    step = 3;
                    label = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
                    await prisma.rentals.update({
                        where: { rental_id: parseInt(rental_id) },
                        data: { rental_status: "WAITING_RECEIVE" },
                    });
                } else if (code === 501) {
                    step = 4;
                    label = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß";
                    await prisma.rentals.update({
                        where: { rental_id: parseInt(rental_id) },
                        data: { rental_status: "RENTED" },
                    });
                }
            } catch (err) {
                console.warn("‚ö†Ô∏è ThaiPost API error:", err.message);
            }
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏Ç‡∏≤‡∏Å‡∏•‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (rental.return_tracking_code) {
            const token = await getThaiPostToken();
            const resReturn = await axios.post(
                "https://trackapi.thailandpost.co.th/post/api/v1/track",
                {
                    status: "all",
                    language: "TH",
                    barcode: [rental.return_tracking_code],
                },
                { headers: { Authorization: `Token ${token}` } }
            );

            const dataR = resReturn.data.response.items;
            const latestR = Object.values(dataR)
                .flat()
                .sort((a, b) => new Date(b.status_date) - new Date(a.status_date))[0];

            if (latestR?.status_description.includes("‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á")) {
                step = 5;
                label = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
            } else if (
                latestR?.status_description.includes("‡∏ô‡∏≥‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à") ||
                latestR?.status_description.includes("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            ) {
                step = 6;
                label = "‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß";
                await prisma.rentals.update({
                    where: { rental_id: parseInt(rental_id) },
                    data: { rental_status: "RETURNED" },
                });
            }
        }

        // ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
        if (rental.rental_status === "RETURNED") {
            step = 7;
            label = "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß";
        }

        return res.json({ step, label });
    } catch (err) {
        console.error("‚ùå getTimelineStatus error:", err);
        res.status(500).json({
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÑ‡∏ó‡∏¢",
        });
    }
};


// ===================================================
// ‡∏î‡∏∂‡∏á shipment ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á
// ===================================================
exports.getPendingShipments = async (req, res) => {
    try {
        const rentals = await prisma.rentals.findMany({
            where: { rental_status: 'WAITING_DELIVER' },
            include: {
                customer: true,
                product: { include: { images: true } },
                order: {
                    include: {
                        shippings: { include: { boxes: { include: { items: true } } } },
                        OrderItem: true,
                    },
                },
            },
            orderBy: { rental_id: 'desc' },
        });

        // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ tracking_code
        const pending = rentals.filter((r) => {
            const boxes = r.order?.shippings?.flatMap(s => s.boxes) || [];

            // ‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô orderItem ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            const matchedBox = boxes.find(b =>
                b.ShippingBoxItem?.some(item =>
                    item.orderItemId === r.order?.OrderItem?.find(i => i.productId === r.product.product_id)?.orderItem_id
                )
            );
            console.log("üß© Rental:", r.product.product_name, "Boxes:", boxes.map(b => b.tracking_code));

            // ‚úÖ ‡∏ñ‡πâ‡∏≤ matchedBox ‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢)
            return !matchedBox;
        });

        console.log("üì¶ Pending rentals:", pending.map(p => ({
            id: p.rental_id,
            name: p.product.product_name
        })));

        res.render('admin_tracking', { title: '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', pending });
    } catch (err) {
        console.error('‚ùå getPendingShipments error:', err);
        res.status(500).send('Server error');
    }
};

// ===================================================
// ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏Ç‡∏≠‡∏á order
// ===================================================
exports.getOrderBoxes = async (req, res) => {
    try {
        const { order_id } = req.query;

        const order = await prisma.order.findUnique({
            where: { order_id: parseInt(order_id) },
            include: {
                shippings: {
                    include: {
                        boxes: {
                            include: {
                                shipping: {
                                    include: {
                                        order: {
                                            include: {
                                                Rentals: {
                                                    include: {
                                                        product: { include: { images: true } },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        });

        if (!order) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ' });

        const boxes = order.shippings.flatMap((s) =>
            s.boxes.map((b) => ({
                tracking_code: b.tracking_code,
                note: b.note,
                rentals: s.order.Rentals.filter(
                    (r) => r.order_id === order.order_id
                ).map((r) => ({
                    product_name: r.product.product_name,
                    image: r.product.images?.[0]?.image_url,
                    rental_id: r.rental_id,
                })),
            }))
        );

        res.json({ boxes });
    } catch (err) {
        console.error('‚ùå getOrderBoxes error:', err);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á' });
    }
};

exports.confirmReceived = async (req, res) => {
    try {
        const { rental_id } = req.body;
        const files = req.files; // ‡∏≠‡∏≤‡∏à‡∏≠‡∏±‡∏õ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ
        if (!rental_id) return res.status(400).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ rental_id" });

        const rental = await prisma.rentals.findUnique({
            where: { rental_id: parseInt(rental_id) },
        });
        if (!rental) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤" });
        if (rental.rental_status !== "WAITING_RECEIVE")
            return res.status(400).json({ message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ" });

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary
        const uploadedImages = [];
        for (const file of files || []) {
            uploadedImages.push({ rental_id: rental.rental_id, image_url: file.path });
        }

        // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (RentalReceiveImage)
        if (uploadedImages.length > 0) {
            await prisma.rentalReceiveImage.createMany({ data: uploadedImages });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ + ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        await prisma.rentals.update({
            where: { rental_id: rental.rental_id },
            data: {
                rental_status: "RENTED",
                received_at: new Date(),
            },
        });

        res.json({ message: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß", images: uploadedImages });
    } catch (err) {
        console.error("‚ùå confirmReceived error:", err);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
};

exports.createReturnBox = async (req, res) => {
    try {
        const { order_id, tracking_code, rental_ids, note } = req.body;
        const file = req.file;

        if (!tracking_code || !rental_ids?.length)
            return res.status(400).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô" });

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        const newBox = await prisma.returnBox.create({
            data: {
                orderId: parseInt(order_id),
                tracking_code: tracking_code.toUpperCase(),
                note: note || null,
            },
        });

        // ‚úÖ ‡∏ú‡∏π‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
        await prisma.returnBoxItem.createMany({
            data: rental_ids.map(id => ({
                boxId: newBox.box_id,
                rentalId: parseInt(id),
            })),
        });

        // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô RETURNING
        await prisma.rentals.updateMany({
            where: { rental_id: { in: rental_ids.map(Number) } },
            data: { rental_status: "RETURNING" },
        });

        await prisma.rentals.updateMany({
            where: { rental_id: { in: rental_ids.map(Number) } },
            data: { return_tracking_code: tracking_code.toUpperCase() },
        });
        
        if (file) {
            await prisma.returnBox.update({
                where: { box_id: newBox.box_id },
                data: { note: file.path },
            });
        }

        res.json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", box_id: newBox.box_id });
    } catch (err) {
        console.error("‚ùå createReturnBox error:", err);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
};


console.log("TH_POST_API_KEY:", process.env.TH_POST_API_KEY?.slice(0, 25) + "...");
exports.getThaiPostToken = getThaiPostToken;
