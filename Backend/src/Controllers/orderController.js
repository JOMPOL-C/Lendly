const { PrismaClient, Prisma, Shipping_shipping_status } = require("@prisma/client");
const prisma = new PrismaClient();
const { CloudinaryStorage } = require("multer-storage-cloudinary");
const multer = require("multer");
const cloudinary = require("cloudinary").v2;

// ü™Ñ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
function generateOrderCode() {
  const date = new Date();
  const y = date.getFullYear();
  const m = String(date.getMonth() + 1).padStart(2, "0");
  const d = String(date.getDate()).padStart(2, "0");
  const rand = Math.floor(Math.random() * 9999).toString().padStart(4, "0");
  return `POPI${y}${m}${d}${rand}`;
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏•‡∏¥‡∏õ
const storage = new CloudinaryStorage({
  cloudinary,
  params: { folder: "Lendly_Slips" },
});
const upload = multer({ storage });

// üß© helper ‚Äî ‡∏ó‡∏≥‡πÉ‡∏´‡πâ multer ‡∏™‡πà‡∏á error ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏î‡πâ
function handleMulterError(middleware) {
  return (req, res, next) => {
    middleware(req, res, (err) => {
      if (err) {
        console.error("‚ùå Multer error:", err);
      }
      next();
    });
  };
}


// ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤ (‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
exports.confirmOrder = async (req, res) => {
  try {
    const orderId = Number(req.params.id);

    const order = await prisma.Orders.update({
      where: { order_id: orderId },
      include: { OrderItem: true },
      data: {},
    });

    await prisma.Rentals.updateMany({
      where: { orderId },
      data: { rental_status: "WAITING_DELIVER" },
    });

    res.json({ message: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order });
  } catch (err) {
    console.error("‚ùå confirmOrder error:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö rental ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
exports.uploadSlip = [
  handleMulterError(upload.single("slip")),
  async (req, res) => {
    try {
      console.log("üì• [UPLOAD-SLIP] req.file =", req.file);
      console.log("üì© req.body =", req.body);

      const { orderId } = req.body;
      if (!orderId) return res.status(400).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ orderId" });

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° rentals ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const order = await prisma.Orders.findUnique({
        where: { order_id: parseInt(orderId) },
        include: { Rentals: true },
      });

      if (!order)
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ" });

      const imageUrl = req.file?.path;
      const cloudinaryId = req.file?.filename;
      if (!imageUrl)
        return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ" });

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å rental ‡πÉ‡∏ô order ‡∏ô‡∏µ‡πâ
      for (const rental of order.Rentals) {
        await prisma.PaymentSlip.create({
          data: {
            rentalId: rental.rental_id,
            image_url: imageUrl,
            cloudinary_id: cloudinaryId,
          },
        });
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å rental ‡πÉ‡∏ô order ‡∏ô‡∏µ‡πâ
      await prisma.Rentals.updateMany({
        where: { orderId: order.order_id },
        data: { rental_status: "WAITING_CONFIRM" },
      });

      console.log(`‚úÖ ‡∏ú‡∏π‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏±‡∏ö Rentals ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Order ID: ${order.order_id}`);

      res.json({
        message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        orderId: order.order_id,
        rentalsUpdated: order.Rentals.length,
      });
    } catch (err) {
      console.error("‚ùå uploadSlip error:", err);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", error: err.message });
    }
  },
];


// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
exports.createOrder = async (req, res) => {
  try {
    const customerId = req.user.id;
    const { selectedItems } = req.body;

    if (!selectedItems?.length) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡∏¥‡πâ‡∏ô" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Cart
    const cartItems = await prisma.CartItem.findMany({
      where: {
        cartItem_id: { in: selectedItems.map(Number) },
        cart: { customerId },
      },
      include: {
        product: { include: { category: true } },
        price: true,
      },
    });

    if (!cartItems.length) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" });
    }

    // üß© helper ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
    const getRentalPrice = (item) =>
      item.mode === "pri"
        ? parseFloat(item.price?.price_pri || 0)
        : parseFloat(item.price?.price_test || 0);

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á log ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    console.log("üõí ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:");
    cartItems.forEach((i) => {
      console.log(
        `  ‚Ä¢ ${i.product?.product_name} (${i.mode === "pri" ? "‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏û‡∏£" : "‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ó‡∏™"}) | ${getRentalPrice(i)}‡∏ø`
      );
    });

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
    const totalPrice = cartItems.reduce((sum, item) => sum + getRentalPrice(item), 0);
    console.log("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", totalPrice);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏´‡∏±‡∏™ order_code
    const order = await prisma.Orders.create({
      data: {
        customerId,
        total_price: new Prisma.Decimal(totalPrice.toFixed(2)),
        order_code: generateOrderCode(),
        OrderItem: {
          create: cartItems.map((item) => ({
            product: { connect: { product_id: item.productId } },
            price: { connect: { productPrice_id: item.productPriceId } },
          })),
        },
      },
      include: {
        OrderItem: { include: { product: true, price: true } },
      },
    });

    console.log(`üßæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${order.order_code} (ID: ${order.order_id})`);

    // üÜï ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Shipping record ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å)
    const shipping = await prisma.Shipping.create({
      data: {
        orderId: order.order_id,
        shipping_status: Shipping_shipping_status.IN_PROGRESS, // ‡∏´‡∏£‡∏∑‡∏≠ WAITING_DELIVER ‡∏ñ‡πâ‡∏≤ enum ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ
      },
    });
    console.log(`üöö ‡∏™‡∏£‡πâ‡∏≤‡∏á Shipping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö order_id: ${order.order_id}, shipping_id: ${shipping.shipping_id}`);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Rentals ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    for (const item of cartItems) {
      const startDate = item.startDate || new Date();
      const endDate = item.endDate || new Date(startDate.getTime() + 3 * 24 * 60 * 60 * 1000);
      const rentalPrice = getRentalPrice(item);

      await prisma.Rentals.create({
        data: {
          customerId,
          productId: item.productId,
          orderId: order.order_id,
          rental_date: startDate,
          rental_end_date: endDate,
          rental_status: "WAITING_CONFIRM",
          mode: item.mode === "pri" ? "PRI" : "TEST",
          total_price: new Prisma.Decimal(rentalPrice.toFixed(2)),
        },
      });

      console.log(`üì¶ ‡πÄ‡∏û‡∏¥‡πà‡∏° Rentals: ${item.product?.product_name} (${item.mode}) | ‡∏£‡∏≤‡∏Ñ‡∏≤: ${rentalPrice}‡∏ø`);
    }

    // ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    await prisma.CartItem.deleteMany({
      where: { cartItem_id: { in: selectedItems.map(Number) } },
    });
    console.log("üßπ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß");

    console.log(`‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ID ${customerId}: ${cartItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏£‡∏ß‡∏° ${totalPrice}‡∏ø`);
    res.json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order, shipping });
  } catch (err) {
    console.error("‚ùå createOrder error:", err);
    res.status(500).json({ message: "Server error", details: err.message });
  }
};

// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
exports.getMyOrders = async (req, res) => {
  try {
    const orders = await prisma.Orders.findMany({
      where: { customerId: req.user.id },
      include: {
        OrderItem: {
          include: {
            product: { include: { images: true } },
            price: true,
          },
        },
        Rentals: {
          include: {
            product: { include: { images: true } },
          },
        },
      },
      orderBy: { order_id: "desc" },
    });

    res.render("Detail_Ren", { title: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", orders });
  } catch (err) {
    console.error("‚ùå getMyOrders error:", err);
    res.status(500).send("Server error");
  }
};

exports.getMyRentals = async (req, res) => {
  try {
    const customerId = req.user.id;

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const orders = await prisma.Orders.findMany({
      where: { customerId },
      include: {
        Rentals: {
          include: {
            product: { include: { images: true } },
          },
        },
      },
      orderBy: { created_at: "desc" },
    });

    // ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Rentals
    const waiting_confirm = [];
    const waiting_deliver = [];
    const renting = [];
    const returned = [];
    const cancelled = [];

    orders.forEach(order => {
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      const byStatus = {
        WAITING_CONFIRM: order.Rentals.filter(r => r.rental_status === "WAITING_CONFIRM"),
        WAITING_DELIVER: order.Rentals.filter(r => r.rental_status === "WAITING_DELIVER"),
        RENTED: order.Rentals.filter(r => r.rental_status === "RENTED"),
        RETURNED: order.Rentals.filter(r => r.rental_status === "RETURNED"),
        CANCELLED: order.Rentals.filter(r => r.rental_status === "CANCELLED"),
      };

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏´‡∏ô‡∏≠‡∏¢‡∏π‡πà ‚Üí push ‡∏Å‡∏≤‡∏£‡πå‡∏î order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÜ
      if (byStatus.WAITING_CONFIRM.length > 0)
        waiting_confirm.push({ ...order, Rentals: byStatus.WAITING_CONFIRM });

      if (byStatus.WAITING_DELIVER.length > 0)
        waiting_deliver.push({ ...order, Rentals: byStatus.WAITING_DELIVER });

      if (byStatus.RENTED.length > 0)
        renting.push({ ...order, Rentals: byStatus.RENTED });

      if (byStatus.RETURNED.length > 0)
        returned.push({ ...order, Rentals: byStatus.RETURNED });

      if (byStatus.CANCELLED.length > 0)
        cancelled.push({ ...order, Rentals: byStatus.CANCELLED });
    });

    res.render("my_rentals", {
      waiting_confirm,
      waiting_deliver,
      renting,
      returned,
      cancelled,
    });
  } catch (err) {
    console.error("‚ùå getMyRentals error:", err);
    res.status(500).send("Server error");
  }
};
