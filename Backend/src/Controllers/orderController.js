const { PrismaClient, Prisma, Shipping_shipping_status } = require("@prisma/client");
const prisma = new PrismaClient();
const { CloudinaryStorage } = require("multer-storage-cloudinary");
const multer = require("multer");
const cloudinary = require("cloudinary").v2;
const { notifyAdminEmail, notifyUserEmail } = require("../utils/emailNotify");

// ü™Ñ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
function generateOrderCode() {
  const date = new Date();
  const y = date.getFullYear();
  const m = String(date.getMonth() + 1).padStart(2, "0");
  const d = String(date.getDate()).padStart(2, "0");
  const rand = Math.floor(Math.random() * 9999).toString().padStart(4, "0");
  return `POPI${y}${m}${d}${rand}`;
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏•‡∏¥‡∏õ
const storage = new CloudinaryStorage({
  cloudinary,
  params: { folder: "Lendly_Slips" },
});
const upload = multer({ storage });

// üß© helper ‚Äî ‡∏ó‡∏≥‡πÉ‡∏´‡πâ multer ‡∏™‡πà‡∏á error ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏î‡πâ
function handleMulterError(middleware) {
  return (req, res, next) => {
    middleware(req, res, (err) => {
      if (err) {
        console.error("‚ùå Multer error:", err);
      }
      next();
    });
  };
}


// ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤ (‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
exports.confirmOrder = async (req, res) => {
  try {
    const orderId = Number(req.params.id);

    const order = await prisma.Orders.update({
      where: { order_id: orderId },
      include: { OrderItem: true },
      data: {},
    });

    await prisma.Rentals.updateMany({
      where: { orderId },
      data: { rental_status: "WAITING_DELIVER" },
    });

    res.json({ message: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order });
  } catch (err) {
    console.error("‚ùå confirmOrder error:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á WAITING_PAYMENT)
exports.uploadSlip = [
  handleMulterError(upload.single("slip")),
  async (req, res) => {
    try {
      console.log("üì• [UPLOAD-SLIP] req.file =", req.file);
      console.log("üì© req.body =", req.body);

      const { orderId } = req.body;
      if (!orderId) return res.status(400).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ orderId" });

      const order = await prisma.Orders.findUnique({
        where: { order_id: parseInt(orderId) },
        include: { Rentals: { include: { customer: true, product: true } } },
      });

      if (!order) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ" });

      const imageUrl = req.file?.path;
      const cloudinaryId = req.file?.filename;
      if (!imageUrl)
        return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ" });

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞ rental ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      const targetRentals = order.Rentals.filter(r => r.rental_status === "WAITING_PAYMENT");

      if (targetRentals.length === 0)
        return res.status(400).json({ message: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß" });

      // ‚úÖ ‡∏ú‡∏π‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å rental ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞
      for (const rental of targetRentals) {
        await prisma.PaymentSlip.create({
          data: {
            rentalId: rental.rental_id,
            image_url: imageUrl,
            cloudinary_id: cloudinaryId,
          },
        });
      }

      // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å WAITING_PAYMENT ‚Üí WAITING_CONFIRM
      await prisma.Rentals.updateMany({
        where: {
          orderId: order.order_id,
          rental_status: "WAITING_PAYMENT",
        },
        data: { rental_status: "WAITING_CONFIRM" },
      });

      console.log(`‚úÖ ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô WAITING_CONFIRM ‡∏Ç‡∏≠‡∏á order ${order.order_id}`);

      // ==========================================
      // ‚úâÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô "‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ
      // ==========================================
      try {
        // üîî ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        await notifyAdminEmail(`
          üßæ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ #${order.customerId}  
          ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ${order.order_code}  
          ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Admin Panel
        `);

        // üîî ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
        for (const r of targetRentals) {
          if (r.customer?.customer_email) {
            await notifyUserEmail(
              r.customer.customer_email,
              `üì® ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (${r.product.product_name})  
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Lendly üíú`
            );
          }
        }

        console.log("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      } catch (mailErr) {
        console.error("‚ö†Ô∏è ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", mailErr.message);
      }

      // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á client
      res.json({ message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô" });

    } catch (err) {
      console.error("‚ùå uploadSlip error:", err);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
  },
];

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
exports.createOrder = async (req, res) => {
  try {
    const customerId = req.user.customer_id;
    const { selectedItems } = req.body;

    if (!selectedItems?.length) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡∏¥‡πâ‡∏ô" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á config ‡∏Ç‡∏≠‡∏á delay ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
    const delay = await prisma.DelaySetting.findFirst();
    const BUFFER_DAYS =
      (delay?.delay_ship_days || 0) + (delay?.delay_admin_days || 0);
    const MS_DAY = 24 * 60 * 60 * 1000;

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Cart
    const cartItems = await prisma.CartItem.findMany({
      where: {
        cartItem_id: { in: selectedItems.map(Number) },
        cart: { customerId },
      },
      include: {
        product: { include: { category: true } },
        price: true,
      },
    });

    if (!cartItems.length) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" });
    }

    const getRentalPrice = (item) =>
      item.mode === "pri"
        ? parseFloat(item.price?.price_pri || 0)
        : parseFloat(item.price?.price_test || 0);

    console.log("üõí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", cartItems.length, "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");

    // ‚úÖ Transaction ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å race condition
    const result = await prisma.$transaction(async (tx) => {
      const totalPrice = cartItems.reduce(
        (sum, item) => sum + getRentalPrice(item),
        0
      );

      const order = await tx.Orders.create({
        data: {
          customerId,
          total_price: new Prisma.Decimal(totalPrice.toFixed(2)),
          order_code: generateOrderCode(),
          OrderItem: {
            create: cartItems.map((item) => ({
              product: { connect: { product_id: item.productId } },
              price: { connect: { productPrice_id: item.productPriceId } },
            })),
          },
        },
        include: {
          OrderItem: { include: { product: true, price: true } },
        },
      });

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Shipping record
      const shipping = await tx.Shipping.create({
        data: {
          orderId: order.order_id,
          shipping_status: Shipping_shipping_status.IN_PROGRESS,
        },
      });

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Rentals
      for (const item of cartItems) {
        const startDate = new Date(item.startDate);
        const endDate = new Date(item.endDate);
        const rentalPrice = getRentalPrice(item);

        // üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á (‡∏£‡∏ß‡∏° buffer)
        const overlap = await tx.Rentals.findFirst({
          where: {
            productId: item.productId,
            rental_status: { notIn: ["CANCELLED", "RETURNED"] },
            rental_end_date: { gte: new Date(startDate.getTime() - BUFFER_DAYS * MS_DAY) },
            rental_date: { lte: new Date(endDate.getTime() + BUFFER_DAYS * MS_DAY) },
          },
        });

        if (overlap) {
          throw new Error(
            `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô "${item.product?.product_name}" ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${overlap.rental_date
              .toISOString()
              .split("T")[0]} ‡∏ñ‡∏∂‡∏á ${overlap.rental_end_date
              .toISOString()
              .split("T")[0]}`
          );
        }

        await tx.Rentals.create({
          data: {
            customerId,
            productId: item.productId,
            orderId: order.order_id,
            rental_date: startDate,
            rental_end_date: endDate,
            rental_status: "WAITING_PAYMENT",
            mode: item.mode === "pri" ? "PRI" : "TEST",
            total_price: new Prisma.Decimal(rentalPrice.toFixed(2)),
          },
        });
      }

      await tx.CartItem.deleteMany({
        where: { cartItem_id: { in: selectedItems.map(Number) } },
      });

      return { order, shipping };
    });

    // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    try {
      await notifyAdminEmail(`
        üõçÔ∏è ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ #${customerId}
        ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${result.order.order_code}
        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${cartItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        üí∞ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î: ${result.order.total_price} ‡∏ö‡∏≤‡∏ó
        ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Admin Panel ‡∏Ç‡∏≠‡∏á Lendly
      `);

      const customer = await prisma.Customer.findUnique({
        where: { customer_id: customerId },
      });

      if (customer?.customer_email) {
        await notifyUserEmail(
          customer.customer_email,
          `üì¶ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ
          ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${result.order.order_code}
          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`
        );
      }
    } catch (mailErr) {
      console.error("‚ö†Ô∏è ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", mailErr.message);
    }

    res.json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", ...result });
  } catch (err) {
    console.error("‚ùå createOrder error:", err);
    if (err.message.includes("‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á")) {
      return res.status(400).json({ message: err.message });
    }
    res.status(500).json({ message: "Server error", details: err.message });
  }
};



// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
exports.getMyOrders = async (req, res) => {
  try {
    const orders = await prisma.Orders.findMany({
      where: { customerId: req.user.id },
      include: {
        OrderItem: {
          include: {
            product: { include: { images: true } },
            price: true,
          },
        },
        Rentals: {
          include: {
            product: { include: { images: true } },
          },
        },
      },
      orderBy: { order_id: "desc" },
    });

    res.render("Detail_Ren", { title: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", orders });
  } catch (err) {
    console.error("‚ùå getMyOrders error:", err);
    res.status(500).send("Server error");
  }
};

exports.getMyRentals = async (req, res) => {
  try {
    const customerId = req.user.customer_id;

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const orders = await prisma.Orders.findMany({
      where: { customerId },
      include: {
        Rentals: {
          include: {
            product: { include: { images: true } },
          },
        },
      },
      orderBy: { created_at: "desc" },
    });

    // ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Rentals
    const waiting_confirm = [];
    const waiting_deliver = [];
    const renting = [];
    const returned = [];
    const cancelled = [];

    orders.forEach(order => {
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      const byStatus = {
        WAITING_CONFIRM: order.Rentals.filter(r => r.rental_status === "WAITING_CONFIRM"),
        WAITING_DELIVER: order.Rentals.filter(r => r.rental_status === "WAITING_DELIVER"),
        RENTED: order.Rentals.filter(r => r.rental_status === "RENTED"),
        RETURNED: order.Rentals.filter(r => r.rental_status === "RETURNED"),
        CANCELLED: order.Rentals.filter(r => r.rental_status === "CANCELLED"),
      };

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏´‡∏ô‡∏≠‡∏¢‡∏π‡πà ‚Üí push ‡∏Å‡∏≤‡∏£‡πå‡∏î order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÜ
      if (byStatus.WAITING_CONFIRM.length > 0)
        waiting_confirm.push({ ...order, Rentals: byStatus.WAITING_CONFIRM });

      if (byStatus.WAITING_DELIVER.length > 0)
        waiting_deliver.push({ ...order, Rentals: byStatus.WAITING_DELIVER });

      if (byStatus.RENTED.length > 0)
        renting.push({ ...order, Rentals: byStatus.RENTED });

      if (byStatus.RETURNED.length > 0)
        returned.push({ ...order, Rentals: byStatus.RETURNED });

      if (byStatus.CANCELLED.length > 0)
        cancelled.push({ ...order, Rentals: byStatus.CANCELLED });
    });

    res.render("my_rentals", {
      waiting_confirm,
      waiting_deliver,
      renting,
      returned,
      cancelled,
    });
  } catch (err) {
    console.error("‚ùå getMyRentals error:", err);
    res.status(500).send("Server error");
  }
};
