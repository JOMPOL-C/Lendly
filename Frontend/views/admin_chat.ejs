<%- include('includes/head') %>
<link rel="stylesheet" href="/styles/chatWidget.css">
<style>
  /* ===== üí¨ Bubbles ‡πÅ‡∏ä‡∏ó‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏ù‡∏±‡πà‡∏á ===== */
  #chat-messages {
    display: flex;
    flex-direction: column;
  }

  .msg {
    max-width: 75%;
    margin: 8px 0;
    padding: 10px 14px;
    border-radius: 16px;
    line-height: 1.4;
    word-wrap: break-word;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
    display: flex;
    flex-direction: column;
  }

  /* üü£ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤) */
  .msg.me {
    align-self: flex-end;
    background: #8b5cf6;
    color: #fff;
    border-top-right-radius: 0;
  }

  /* ‚ö™ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢) */
  .msg.user {
    align-self: flex-start;
    background: #f3f4f6;
    color: #111827;
    border-top-left-radius: 0;
  }

  /* üè∑Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á */
  .sender-name {
    font-size: 13px;
    font-weight: 600;
    margin-bottom: 4px;
  }

  /* üïí ‡πÄ‡∏ß‡∏•‡∏≤ */
  .msg small {
    margin-top: 4px;
    font-size: 11px;
    color: #d1d5db;
    text-align: right;
  }

  .chat-item {
    transition: background 0.2s ease, transform 0.1s ease;
  }
  .chat-item:hover {
    background: #ede9fe;
    transform: scale(1.02);
  }
</style>
</head>

<body>
  <main style="display:flex; height:90vh;">
    <!-- üßç ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ -->
    <aside style="width:280px; border-right:1px solid #ddd; overflow-y:auto; padding:10px;" id="chat-list">
      <h3 style="color:#6d28d9;">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h3>
    </aside>

    <!-- üí¨ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° -->
    <section style="flex:1; display:flex; flex-direction:column;">
      <div id="chat-header" style="background:#6d28d9;color:white;padding:10px;">
        <h3 id="chat-customer-name">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h3>
      </div>
      <div id="chat-messages" style="flex:1;overflow-y:auto;padding:10px;background:#f9fafb;"></div>
      <form id="chat-form" style="display:flex;border-top:1px solid #ddd;">
        <input id="chat-input" style="flex:1;padding:10px;" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..." />
        <button type="submit" style="background:#6d28d9;color:white;border:none;padding:10px 16px;">‡∏™‡πà‡∏á</button>
      </form>
    </section>
  </main>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.0.0/firebase-app.js";
    import {
      getFirestore, collection, addDoc, query, orderBy, onSnapshot,
      doc, updateDoc, getDoc
    } from "https://www.gstatic.com/firebasejs/11.0.0/firebase-firestore.js";

    const firebaseConfig = {
      apiKey: "AIzaSyAeBRXnxHUKXUKcm2r_DSfzvBHXuOuWhaQ",
      authDomain: "lendly-5ee70.firebaseapp.com",
      projectId: "lendly-5ee70",
      storageBucket: "lendly-5ee70.firebasestorage.app",
      messagingSenderId: "831943468595",
      appId: "1:831943468595:web:846bf587df4b1b7065e546",
      measurementId: "G-RCPEEFTNTW"
    };
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);

    const listBox = document.getElementById("chat-list");
    const msgBox = document.getElementById("chat-messages");
    const input = document.getElementById("chat-input");
    const form = document.getElementById("chat-form");
    let currentCustomerId = null;

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ä‡∏ó‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    const chatQuery = query(collection(db, "chats"), orderBy("updatedAt", "desc"));
    onSnapshot(chatQuery, (snapshot) => {
      listBox.innerHTML = "<h3 style='color:#6d28d9;'>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h3>";
      snapshot.forEach((chatDoc) => {
        const data = chatDoc.data();
        const div = document.createElement("div");
        div.className = "chat-item";
        div.style.padding = "10px";
        div.style.cursor = "pointer";
        div.style.borderBottom = "1px solid #eee";
        div.innerHTML = `
          <strong>${data.customerName || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠"}</strong><br>
          <small style="color:#555;">${data.lastMessage || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}</small>
        `;
        div.onclick = () => openChat(chatDoc.id, data.customerName);
        listBox.appendChild(div);
      });
    });

    // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    async function openChat(chatId, fallbackName) {
      currentCustomerId = chatId;
      const chatDoc = await getDoc(doc(db, "chats", chatId));
      const chatData = chatDoc.exists() ? chatDoc.data() : {};
      const customerName = chatData.customerName || fallbackName || "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
      document.getElementById("chat-customer-name").textContent = customerName;

      const q = query(
        collection(db, `chats/${chatId}/messages`),
        orderBy("createdAt", "asc")
      );

      onSnapshot(q, (snapshot) => {
        msgBox.innerHTML = "";
        snapshot.forEach((docSnap) => {
          const m = docSnap.data();
          const time = m.createdAt?.toDate
            ? m.createdAt.toDate().toLocaleTimeString("th-TH", {
              hour: "2-digit",
              minute: "2-digit",
            })
            : "";

          const div = document.createElement("div");
          div.className = "msg " + (m.senderRole === "ADMIN" ? "me" : "user");
          const senderLabel = m.senderRole === "ADMIN" ? "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" : customerName;

          div.innerHTML = `
            <div class="sender-name">${senderLabel}</div>
            <div>${m.message}</div>
            <small>${time}</small>
          `;
          msgBox.appendChild(div);
        });
        msgBox.scrollTop = msgBox.scrollHeight;
      });
    }

    // ‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      if (!input.value.trim() || !currentCustomerId) return;

      const messageText = input.value.trim();
      await addDoc(collection(db, `chats/${currentCustomerId}/messages`), {
        senderId: "ADMIN",
        senderRole: "ADMIN",
        message: messageText,
        createdAt: new Date()
      });

      await updateDoc(doc(db, "chats", currentCustomerId), {
        lastMessage: messageText,
        updatedAt: new Date()
      });

      input.value = "";
    });
  </script>
</body>
</html>
